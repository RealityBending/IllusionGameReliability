---
title: "Illusion Game Reliability"
subtitle: "Illusion Task (Session 1)"
date: "`r Sys.Date()`"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: false
    toc: true
execute: 
  cache: false
---


```{r}
#| echo: false

options(
  digits = 3,
  mc.cores = 4,
  brms.algorithm = "sampling",
  brms.backend = "cmdstanr",
  dplyr.summarise.inform = FALSE
)

fig.width <- 6 * sqrt(2) # see::golden_ratio(7)
fig.height <- 6

knitr::opts_chunk$set(
  collapse = TRUE,
  dpi = 200,
  fig.width = fig.width,
  fig.height = fig.height
)
```

This script contains the analysis of the Illusion Game in the first session (i.e., not the retest). 

## Data Preparation

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(ggdist)
library(ggside)
library(easystats)
library(patchwork)
library(brms)

logmod <- function(x) sign(x) * log(1 + abs(x))
sqrtmod <- function(x) sign(x) * sqrt(abs(x))
cbrtmod <- function(x) sign(x) * (abs(x)**(1 / 3))

df <- read.csv("../data/preprocessed_illusion1.csv") |>
  mutate(
    Block = as.factor(Block),
    Illusion_Side = as.factor(Illusion_Side),
    Illusion_Effect = fct_relevel(as.factor(Illusion_Effect), "Incongruent", "Congruent")
  ) 
```


## GAMs Fitting

```{r make_GAMs}
#| eval: false

for (ill in c(
  "Ebbinghaus",
  "VerticalHorizontal",
  "MullerLyer"
)) {
  # print(ill)
  model <- brms::brm(
    Error ~ t2(Illusion_Difference, Illusion_Strength, bs = "tp") + (1 | Participant),
    data = filter(df, Illusion_Type == ill),
    family = "bernoulli",
    algorithm = "sampling",
    refresh = 400
  )

  name <- paste0("gam_", tolower(ill), "_err")
  assign(name, model) # Rename with string
  save(list = name, file = paste0("models/", name, ".Rdata"))

  model <- brms::brm(
    brms::bf(
      RT ~ t2(Illusion_Difference, Illusion_Strength, bs = "tp") + poly(ISI, 2) + (1 | Participant),
      sigma ~ t2(Illusion_Difference, Illusion_Strength, bs = "tp") + poly(ISI, 2) + (1 | Participant),
      beta ~ t2(Illusion_Difference, Illusion_Strength, bs = "tp") + poly(ISI, 2) + (1 | Participant)
    ),
    data = filter(df, Illusion_Type == ill, Error == 0),
    family = "exgaussian",
    init = 0,
    algorithm = "sampling",
    refresh = 400
  )

  name <- paste0("gam_", tolower(ill), "_rt")
  assign(name, model) # Rename with string
  save(list = name, file = paste0("models/", name, ".Rdata"))
}
```

## Ebbinghaus

### Model Selection

```{r ebbinghaus_testmodels}
test_models <- function(data) {
  # TODO: add random effect
  models_err <- list()
  models_rt <- list()
  for (diff in c(
    "Illusion_Difference",
    "logmod(Illusion_Difference)",
    "sqrtmod(Illusion_Difference)",
    "cbrtmod(Illusion_Difference)"
  )) {
    for (ill in c(
      "abs(Illusion_Strength)",
      "logmod(abs(Illusion_Strength))",
      "sqrtmod(abs(Illusion_Strength))",
      "cbrtmod(abs(Illusion_Strength))"
    )) {
      print(paste(diff, "x", ill))
      err <- glmmTMB::glmmTMB(
        as.formula(
          paste0(
            "Error ~ Illusion_Effect / (",
            diff,
            " * ",
            ill,
            ") + (1|Participant)"
          )
        ),
        data = data,
        family = "binomial"
      )
      models_err[[paste(diff, "*", ill)]] <- err

      rt <- glmmTMB::glmmTMB(
        as.formula(
          paste0(
            "RT ~ Illusion_Effect / (",
            diff,
            " * ",
            ill,
            ") + poly(ISI, 2) + (1|Participant)"
          )
        ),
        data = data
      )
      models_rt[[paste(diff, "*", ill)]] <- rt
    }
  }
  mutate(performance::test_performance(models_err), Outcome = "Error") |>
    rbind(mutate(performance::test_performance(models_rt), Outcome = "RT")) |>
    select(-Model, -log_BF) |>
    datawizard::convert_na_to(select = "BF", replacement = 1) |>
    arrange(Outcome, desc(BF)) |>
    display(footer = "Each model is compared to 'Illusion_Difference'")
}

test_models(filter(df, Illusion_Type == "Ebbinghaus"))
```


### Error Rate

```{r}
data <- filter(df, Illusion_Type == "Ebbinghaus")
```

#### Descriptive

```{r}
plot_desc_errors_obs <- function(data, n_groups=5) {
  data |>
    mutate(
      Illusion_Difference = datawizard::categorize(Illusion_Difference,
        n_groups = n_groups,
        split = "equal_length",
        label = "median"
      ),
      bins = datawizard::categorize(Illusion_Strength, split = "equal_length", n_groups = 20)
    ) |>
    group_by(Illusion_Difference, bins) |>
    summarize(
      Illusion_Strength = mean(Illusion_Strength),
      Error = sum(Error) / n()
    ) |>
    ggplot(aes(x = Illusion_Strength)) +
    geom_bar(aes(y = Error, fill = Illusion_Difference),
      alpha = 1 / 3, position = "dodge", stat = "identity", width = diff(range(data$Illusion_Strength)) / 20
    )
}


plot_desc_errors <- function(data) {

  dat <- data |>
    mutate(
      Illusion_Difference =
        datawizard::categorize(Illusion_Difference,
          n_groups = 5,
          split = "equal_length",
          label = "median"
        )
    )

  col <- colorRampPalette(c("#F44336", "#FFC107", "#4CAF50"))(length(unique(dat$Illusion_Difference)))

  plot_desc_errors_obs(data) +
    geom_smooth(data=dat,
                aes(y = Error, color = Illusion_Difference, fill = Illusion_Difference),
      method = "gam",
      formula = y ~ s(x, bs = "cr", k=8),
      method.args = list(family = "binomial"),
      alpha = 1 / 3
    ) +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0), labels = scales::percent) +
    scale_color_manual(values = col) +
    scale_fill_manual(values = col) +
    coord_cartesian(ylim = c(0, 1), xlim = range(dat$Illusion_Strength)) +
    labs(x = "Illusion Strength", y = "Probability of Error") +
    theme_modern() +
    facet_grid(~Illusion_Side, labeller = "label_both")
}

plot_desc_errors(data)
```



#### Model Specification


```{r m_err_ebbinghaus}
#| eval: false

formula <- brms::bf(
  Error ~ Illusion_Effect / (logmod(Illusion_Difference) * abs(Illusion_Strength)) +
    (1 + Illusion_Effect / (logmod(Illusion_Difference) * abs(Illusion_Strength)) | Participant),
  family = "bernoulli",
  decomp = "QR"
)

# brms::get_prior(formula, data = data)
# brms::validate_prior(formula)

illusion1_ebbinghaus_err <- brms::brm(formula,
  data = data,
  refresh = 100,
  normalize = FALSE
)

save(illusion1_ebbinghaus_err, file = "models/illusion1_ebbinghaus_err.Rdata")
```

#### Model Inspection


```{r}
load("models/illusion1_ebbinghaus_err.Rdata")
load("models/gam_ebbinghaus_err.Rdata")
```

```{r plot_err_ebbinghaus}


plot_model_errors <- function(data, model, gam) {
  pred <- estimate_relation(model, length = c(3, 100))

  dat <- data |>
    mutate(
      Illusion_Difference = datawizard::categorize(
        Illusion_Difference,
        n_groups = 3,
        split = "equal_length",
        label = "median"
      ),
      Illusion_Strength = as.character(Illusion_Strength)
    ) |>
    group_by(Illusion_Strength, Illusion_Difference) |>
    summarize(
      Error = sum(Error),
      n = n()
    ) |>
    group_by(Illusion_Strength) |>
    mutate(
      n = sum(n),
      Error = Error / n,
      Illusion_Strength = as.numeric(Illusion_Strength)
    ) |>
    ungroup()

  plot_desc_errors_obs(data, n_groups = 3) +
    scale_fill_manual(values = c("#F44336", "#FFC107", "#4CAF50"), guide = "none") +
    ggnewscale::new_scale_fill() +
    geom_ribbon(data=pred, aes(
      ymin = CI_low, ymax = CI_high,
      fill = Illusion_Difference, group = Illusion_Difference
    ),
    alpha = 0.2
    ) +
    geom_vline(xintercept = 0, linetype = "dashed") +
    geom_hline(yintercept = c(0.5), linetype = "dotted", alpha = 0.5) +
    geom_line(
      data = estimate_relation(gam, length = c(3, 100)),
      aes(y=Predicted, color = Illusion_Difference, group = Illusion_Difference),
      linetype = "dotted"
    )  +
    geom_line(data=pred, aes(y=Predicted, color = Illusion_Difference, group = Illusion_Difference)) +
    scale_y_continuous(limits = c(0, 1), expand = c(0, 0), labels = scales::percent) +
    scale_x_continuous(expand = c(0, 0)) +
    scale_color_gradientn(colours = c("#4CAF50", "#FFC107", "#F44336"), trans = "reverse") +
    scale_fill_gradientn(colours = c("#4CAF50", "#FFC107", "#F44336"), trans = "reverse") +
    theme_modern(axis.title.space = 5) +
    guides(color = "none") +
    labs(
      color = "Difficulty",
      fill = "Difficulty",
      y = "Probability of Error",
      x = "Illusion Strength"
    ) +
    theme(plot.title = element_text(face = "bold", hjust = 0.5))
}

p_ebbinghaus_err <- plot_model_errors(data, illusion1_ebbinghaus_err, gam_ebbinghaus_err)
p_ebbinghaus_err
```

#### Model Performance

```{r}
performance::performance(illusion1_ebbinghaus_err, metrics = c("R2", "ICC")) |>
  display()
```



### Response Time

```{r}
data <- filter(df, Illusion_Type == "Ebbinghaus", Error == 0)
```

#### Descriptive

```{r}
plot_desc_rt <- function(data) {
  dat <- data |>
    mutate(
      Illusion_Difference =
        datawizard::categorize(Illusion_Difference,
          n_groups = 5,
          split = "equal_length",
          label = "median"
        )
    )
  
  col <- colorRampPalette(c("#F44336", "#FFC107", "#4CAF50"))(length(unique(dat$Illusion_Difference)))

  dat |>
    ggplot(aes(x = Illusion_Strength, y = RT)) +
    geom_jitter2(aes(color = Illusion_Difference),
      width = diff(range(dat$Illusion_Strength)) / 50,
      alpha = 1 / 3
    ) +
    geom_smooth(aes(y = RT, color = Illusion_Difference, fill = Illusion_Difference),
      method = "gam",
      formula = y ~ s(x, bs = "cr", k=8),
      alpha = 1 / 10
    ) +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_color_manual(values = col) +
    scale_fill_manual(values = col) +
    coord_cartesian(ylim = c(0, 2)) +
    labs(x = "Illusion Strength", y = "Response Time") +
    theme_modern() +
    ggside::geom_ysidedensity(aes(fill = Illusion_Difference), color = NA, alpha = 0.3) +
    ggside::theme_ggside_void() +
    ggside::scale_ysidex_continuous(expand = c(0, 0)) +
    ggside::ggside() +
    facet_grid(~Illusion_Side, labeller = "label_both")
}

plot_desc_rt(data)
```






#### Model Specification


```{r m_rt_ebbinghaus}
#| eval: false

formula <- brms::bf(
  RT ~ Illusion_Effect / (Illusion_Difference * abs(Illusion_Strength)) + poly(ISI, 2) +
    (1 + Illusion_Effect / (Illusion_Difference * abs(Illusion_Strength)) | Participant),
  sigma ~ Illusion_Effect / (Illusion_Difference * abs(Illusion_Strength)) + poly(ISI, 2) +
    (1 | Participant),
  beta ~ Illusion_Effect / (Illusion_Difference * abs(Illusion_Strength)) + poly(ISI, 2) +
    (1 | Participant),
  family = "exgaussian",
  decomp = "QR"
)

# brms::get_prior(formula, data = data)
# brms::validate_prior(formula)

illusion1_ebbinghaus_rt <- brms::brm(formula,
  data = data,
  refresh = 100,
  init = 0,
  normalize = FALSE
)

save(illusion1_ebbinghaus_rt, file = "models/illusion1_ebbinghaus_rt.Rdata")
```

#### Model Inspection


```{r}
load("models/illusion1_ebbinghaus_rt.Rdata")
load("models/gam_ebbinghaus_rt.Rdata")
```

```{r}
plot_model_rt <- function(data, model, gam) {
  pred <- estimate_relation(model, at = c("Illusion_Effect", "Illusion_Difference", "Illusion_Strength"), length = c(3, 100))

  dat <- data |>
    mutate(Illusion_Difference = datawizard::categorize(
      Illusion_Difference,
      n_groups = 3,
      split = "equal_length",
      label = "median"
    ))

  col <- colorRampPalette(c("#F44336", "#FFC107", "#4CAF50"))(length(unique(dat$Illusion_Difference)))

  pred |>
    ggplot(aes(x = Illusion_Strength, y = Predicted)) +
    ggdist::stat_gradientinterval(
      data = dat,
      aes(y = RT, fill = Illusion_Difference),
      geom = "slab",
      scale = 1,
      width = diff(range(dat$Illusion_Strength)) / 20,
      fill_type = "gradient",
      position = "dodge"
    ) +
    scale_fill_manual(values = col, guide = "none") +
    ggnewscale::new_scale_fill() +
    geom_ribbon(aes(
      ymin = CI_low, ymax = CI_high,
      fill = Illusion_Difference, group = Illusion_Difference
    ),
    alpha = 0.2
    ) +
    geom_vline(xintercept = 0, linetype = "dashed") +
    geom_line(aes(color = Illusion_Difference, group = Illusion_Difference)) +
    geom_line(
      data = estimate_relation(gam, at=c("Illusion_Difference", "Illusion_Strength"), length = c(3, 100)),
      aes(color = Illusion_Difference, group = Illusion_Difference),
      linetype = "dotted"
    ) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) +
    scale_color_gradientn(colours = rev(col), trans = "reverse") +
    scale_fill_gradientn(colours = rev(col), trans = "reverse") +
    coord_cartesian(ylim = c(0.25, 1.25)) +
    labs(
      x = "Illusion Strength",
      y = "Response Time (s)",
      color = "Difficulty",
      fill = "Difficulty"
    ) +
    theme_modern(axis.title.space = 5)
  # ggnewscale::new_scale_fill() +
  # scale_fill_manual(values = c("#F44336", "#FFC107", "#4CAF50"), guide = "none") +
  # ggside::geom_ysidedensity(data=dat,
  #                           aes(fill = Illusion_Difference, y = RT), color = NA, alpha = 0.3) +
  # ggside::theme_ggside_void() +
  # ggside::scale_ysidex_continuous(expand = c(0, 0)) +
  # ggside::ggside()
}

p_ebbinghaus_rt <- plot_model_rt(data, illusion1_ebbinghaus_rt, gam_ebbinghaus_rt)
p_ebbinghaus_rt
```

#### Model Performance

```{r}
performance::performance(illusion1_ebbinghaus_rt, metrics = c("R2", "ICC")) |>
  display()
```

```{r}
plot_ppcheck <- function(model, gam) {

  pred <- modelbased::estimate_prediction(model, keep_iterations = 50) |>
    bayestestR::reshape_iterations() |>
    mutate(iter_group = as.factor(iter_group)) |>
    estimate_density(select = "iter_value", at = "iter_group")

  predgam <- modelbased::estimate_prediction(gam, keep_iterations = 50) |>
    bayestestR::reshape_iterations() |>
    mutate(iter_group = as.factor(iter_group)) |>
    estimate_density(select = "iter_value", at = "iter_group")

  estimate_density(insight::get_data(model)$RT) |>
    ggplot(aes(x = x, y = y)) +
    geom_area(fill = "#9E9E9E") +
    geom_line(
      data = predgam,
      aes(group = iter_group), color = "#2196F3", size = 0.1, alpha = 0.5
    ) +
    geom_line(
      data = pred,
      aes(group = iter_group), color = "#FF5722", size = 0.1, alpha = 0.5
    ) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) +
    coord_cartesian(xlim = c(0, 2)) +
    theme_modern() +
    labs(x = "Reaction Time (ms)", y = "", title = "Posterior Predictive Check") +
    theme(
      plot.title = element_text(face = "bold", hjust = 0.5),
      axis.text.y = element_blank()
    )
}

plot_ppcheck(illusion1_ebbinghaus_rt, gam_ebbinghaus_rt)
```



### Visualization


```{r}
plot_all <- function(data, p_err, p_rt, question="") {
  illname <- unique(data$Illusion_Type)
  # Get stimuli
  dat <- data |>
    filter(Error == 0) |>
    filter(
      Illusion_Type == illname,
      Answer %in% c("left", "up")
    ) |>
    select(Stimulus, Illusion_Strength, Illusion_Difference)

  dat <- rbind(
    filter(dat, Illusion_Strength == min(Illusion_Strength)) |>
      filter(Illusion_Difference %in% c(min(Illusion_Difference), max(Illusion_Difference))),
    filter(dat, Illusion_Strength == max(Illusion_Strength)) |>
      filter(Illusion_Difference %in% c(min(Illusion_Difference), max(Illusion_Difference))),
    filter(dat, Illusion_Difference == min(Illusion_Difference)) |>
      filter(Illusion_Strength %in% c(min(Illusion_Strength), max(Illusion_Strength))),
    filter(dat, Illusion_Difference == max(Illusion_Difference)) |>
      filter(Illusion_Strength %in% c(min(Illusion_Strength), max(Illusion_Strength)))
  )


  img_leftdown <- filter(dat, Illusion_Difference == max(Illusion_Difference)) |>
    filter(Illusion_Strength == min(Illusion_Strength)) |>
    pull(Stimulus) |>
    unique()
  img_rightdown <- filter(dat, Illusion_Difference == max(Illusion_Difference)) |>
    filter(Illusion_Strength == max(Illusion_Strength)) |>
    pull(Stimulus) |>
    unique()
  img_leftup <- filter(dat, Illusion_Strength == min(Illusion_Strength)) |>
    filter(Illusion_Difference == min(Illusion_Difference)) |>
    pull(Stimulus) |>
    unique()
  img_rightup <- filter(dat, Illusion_Strength == max(Illusion_Strength)) |>
    filter(Illusion_Difference == min(Illusion_Difference)) |>
    pull(Stimulus) |>
    unique()


  img_leftdown <- paste0("../session1/stimuli/", img_leftdown, ".png") |>
    png::readPNG() |>
    grid::rasterGrob(interpolate = TRUE) |>
    patchwork::wrap_elements()
  img_rightdown <- paste0("../session1/stimuli/", img_rightdown, ".png") |>
    png::readPNG() |>
    grid::rasterGrob(interpolate = TRUE) |>
    patchwork::wrap_elements()
  img_leftup <- paste0("../session1/stimuli/", img_leftup, ".png") |>
    png::readPNG() |>
    grid::rasterGrob(interpolate = TRUE) |>
    patchwork::wrap_elements()
  img_rightup <- paste0("../session1/stimuli/", img_rightup, ".png") |>
    png::readPNG() |>
    grid::rasterGrob(interpolate = TRUE) |>
    patchwork::wrap_elements()

  p <- ((p_err + theme(
    axis.title.x = element_blank(),
    plot.title = element_blank()
  )) /
    (p_rt + theme(plot.title = element_blank(), legend.position = "none"))) +
    patchwork::plot_layout(guides = "collect")

  wrap_elements(((img_leftup | patchwork::plot_spacer() | img_rightup) / p / (img_leftdown | patchwork::plot_spacer() | img_rightdown) +
    patchwork::plot_layout(heights = c(0.5, 1.5, 0.5)) +
    patchwork::plot_annotation(
      title = case_when(
        illname == "MullerLyer" ~ "Müller-Lyer",
        illname == "VerticalHorizontal" ~ "Vertical-Horizontal",
        TRUE ~ "Ebbinghaus"
      ),
      subtitle = question,
      theme = theme(plot.title = element_text(
        size=rel(1.75), face="bold", hjust=0.5),
        plot.subtitle = element_text(size=rel(1), face="italic", hjust=0.5, margin=margin(0,0,-30,0))))))
}

p_ebbinghaus <- plot_all(data, p_ebbinghaus_err, p_ebbinghaus_rt, "Which red circle is bigger?")
p_ebbinghaus
```



## Müller-Lyer


### Model Selection

```{r mullerlyer_testmodels}
test_models(filter(df, Illusion_Type == "MullerLyer"))
```



### Error Rate

```{r}
data <- filter(df, Illusion_Type == "MullerLyer")
```

#### Descriptive

```{r}
plot_desc_errors(data)
```





#### Model Specification


```{r m_err_mullerlyer}
#| eval: false

formula <- brms::bf(
  Error ~ Illusion_Effect / (logmod(Illusion_Difference) * sqrtmod(abs(Illusion_Strength))) +
    (1 + Illusion_Effect / (logmod(Illusion_Difference) * sqrtmod(abs(Illusion_Strength))) | Participant),
  family = "bernoulli",
  decomp = "QR"
)

# brms::get_prior(formula, data = data)
# brms::validate_prior(formula)

illusion1_mullerlyer_err <- brms::brm(formula,
  data = data,
  refresh = 100,
  normalize = FALSE
)

save(illusion1_mullerlyer_err, file = "models/illusion1_mullerlyer_err.Rdata")
```

#### Model Inspection


```{r}
load("models/illusion1_mullerlyer_err.Rdata")
load("models/gam_mullerlyer_err.Rdata")
```

```{r}
p_mullerlyer_err <- plot_model_errors(data, illusion1_mullerlyer_err, gam_mullerlyer_err)
p_mullerlyer_err
```

#### Model Performance

```{r}
performance::performance(illusion1_mullerlyer_err, metrics = c("R2", "ICC")) |>
  display()
```




### Response Time

```{r}
data <- filter(df, Illusion_Type == "MullerLyer", Error == 0)
```

#### Descriptive

```{r}
plot_desc_rt(data)
```







#### Model Specification


```{r m_rt_mullerlyer}
#| eval: false

formula <- brms::bf(
  RT ~ Illusion_Effect / (sqrtmod(Illusion_Difference) * abs(Illusion_Strength)) + poly(ISI, 2) +
    (1 + Illusion_Effect / (sqrtmod(Illusion_Difference) * abs(Illusion_Strength)) | Participant),
  sigma ~ Illusion_Effect / (sqrtmod(Illusion_Difference) * abs(Illusion_Strength)) + poly(ISI, 2) +
    (1 | Participant),
  beta ~ Illusion_Effect / (sqrtmod(Illusion_Difference) * abs(Illusion_Strength)) + poly(ISI, 2) +
    (1 | Participant),
  family = "exgaussian",
  decomp = "QR"
)

# brms::get_prior(formula, data = data)
# brms::validate_prior(formula)

illusion1_mullerlyer_rt <- brms::brm(formula,
  data = data,
  refresh = 100,
  init = 0,
  normalize = FALSE
)

save(illusion1_mullerlyer_rt, file = "models/illusion1_mullerlyer_rt.Rdata")
```

#### Model Inspection


```{r}
load("models/illusion1_mullerlyer_rt.Rdata")
load("models/gam_mullerlyer_rt.Rdata")
```

```{r}
p_mullerlyer_rt <- plot_model_rt(data, illusion1_mullerlyer_rt, gam_mullerlyer_rt)
p_mullerlyer_rt
```

#### Model Performance

```{r}
performance::performance(illusion1_mullerlyer_rt, metrics = c("R2", "ICC")) |>
  display()
```

```{r}
plot_ppcheck(illusion1_mullerlyer_rt, gam_mullerlyer_rt)
```

### Visualization


```{r}
p_mullerlyer <- plot_all(data, p_mullerlyer_err, p_mullerlyer_rt, "Which red line is longer?")
p_mullerlyer
```




## Vertical-Horizontal


### Model Selection

```{r verticalhorizontal_testmodels}
test_models(filter(df, Illusion_Type == "VerticalHorizontal"))
```


### Error Rate

```{r}
data <- filter(df, Illusion_Type == "VerticalHorizontal")
```

#### Descriptive

```{r}
plot_desc_errors(data)
```





#### Model Specification


```{r m_err_verticalhorizontal}
#| eval: false

formula <- brms::bf(
  Error ~ Illusion_Effect / (sqrtmod(Illusion_Difference) * sqrtmod(abs(Illusion_Strength))) +
    (1 + Illusion_Effect / (sqrtmod(Illusion_Difference) * sqrtmod(abs(Illusion_Strength))) | Participant),
  family = "bernoulli",
  decomp = "QR"
)

# brms::get_prior(formula, data = data)
# brms::validate_prior(formula)

illusion1_verticalhorizontal_err <- brms::brm(formula,
  data = data,
  refresh = 100,
  normalize = FALSE
)

save(illusion1_verticalhorizontal_err, file = "models/illusion1_verticalhorizontal_err.Rdata")
```

#### Model Inspection

```{r}
load("models/illusion1_verticalhorizontal_err.Rdata")
load("models/gam_verticalhorizontal_err.Rdata")
```

```{r}
p_verticalhorizontal_err <- plot_model_errors(
  data,
  illusion1_verticalhorizontal_err,
  gam_verticalhorizontal_err
)
p_verticalhorizontal_err
```

#### Model Performance

```{r}
performance::performance(illusion1_verticalhorizontal_err, metrics = c("R2", "ICC")) |>
  display()
```




### Response Time

```{r}
data <- filter(df, Illusion_Type == "VerticalHorizontal", Error == 0)
```

#### Descriptive

```{r}
plot_desc_rt(data)
```






#### Model Specification


```{r m_rt_verticalhorizontal}
#| eval: false

formula <- brms::bf(
  RT ~ Illusion_Effect / (cbrtmod(Illusion_Difference) * sqrtmod(abs(Illusion_Strength))) + poly(ISI, 2) +
    (1 + Illusion_Effect / (cbrtmod(Illusion_Difference) * sqrtmod(abs(Illusion_Strength))) | Participant),
  sigma ~ Illusion_Effect / (cbrtmod(Illusion_Difference) * sqrtmod(abs(Illusion_Strength))) + poly(ISI, 2) +
    (1 | Participant),
  beta ~ Illusion_Effect / (cbrtmod(Illusion_Difference) * sqrtmod(abs(Illusion_Strength))) + poly(ISI, 2) +
    (1 | Participant),
  family = "exgaussian",
  decomp = "QR"
)

# brms::get_prior(formula, data = data)
# brms::validate_prior(formula)

illusion1_verticalhorizontal_rt <- brms::brm(formula,
  data = data,
  refresh = 100,
  init = 0,
  normalize = FALSE
)

save(illusion1_verticalhorizontal_rt, file = "models/illusion1_verticalhorizontal_rt.Rdata")
```

#### Model Inspection


```{r}
load("models/illusion1_verticalhorizontal_rt.Rdata")
load("models/gam_verticalhorizontal_rt.Rdata")
```

```{r}
p_verticalhorizontal_rt <- plot_model_rt(
  data,
  illusion1_verticalhorizontal_rt,
  gam_verticalhorizontal_rt
)
p_verticalhorizontal_rt
```

#### Model Performance

```{r}
performance::performance(illusion1_verticalhorizontal_rt, metrics = c("R2", "ICC")) |>
  display()
```

```{r}
plot_ppcheck(illusion1_verticalhorizontal_rt, gam_verticalhorizontal_rt)
```


### Visualization


```{r}
p_verticalhorizontal <- plot_all(data, p_verticalhorizontal_err, p_verticalhorizontal_rt, "Which red line is longer?")
p_verticalhorizontal
```




```{r mixedmodels}
#| fig-width: 16
#| fig-height: 10

p <- p_ebbinghaus | p_mullerlyer | p_verticalhorizontal
p
ggsave("figures/figure1.png", p, dpi=300, width=16, height=10)
```



## Individual Scores 

### Extract Scores

```{r}
#| eval: false

for(m in c("ebbinghaus", "mullerlyer", "verticalhorizontal")) {
  for(i in c("err", "rt")) {
    load(paste0("models/illusion1_", m, "_", i, ".Rdata"))
  }
}
```


```{r get_scores}
get_scores <- function(model, illusion="Ebbinghaus") {
  family <- insight::find_response(model)
  scores <- modelbased::estimate_grouplevel(model, dispersion=TRUE, component="all", test=NULL, diagnostic=NULL) |>
    data_filter(str_detect(Level, "Participant")) |>
    data_filter(str_detect(Parameter, "Illusion_EffectIncongruent")) |>
    mutate(
      Level = str_remove_all(Level, "Participant."),
      Level = str_remove_all(Level, "_sigma."),
      Level = str_remove_all(Level, "_beta."),
      Parameter = str_remove_all(Parameter, "Illusion_EffectIncongruent:"),
      Parameter = str_remove_all(Parameter, "cbrtmod"),
      Parameter = str_remove_all(Parameter, "sqrtmod"),
      Parameter = str_remove_all(Parameter, "logmod"),
      Parameter = str_remove_all(Parameter, "abs"),
      Parameter = case_when(str_detect(Parameter, "Illusion_Difference:Illusion_Strength") ~ "Interaction",
                            str_detect(Parameter, "Illusion_Strength") ~ "Strength",
                            str_detect(Parameter, "Illusion_Difference") ~ "Diff",
                            str_detect(Parameter, "Illusion_EffectIncongruent") ~ "Incongruent", # Temporary
                            TRUE ~ Parameter),
      Parameter = case_when(str_detect(Group, "_sigma") ~ paste0(Parameter, "Sigma"),
                            str_detect(Group, "_beta") ~ paste0(Parameter, "Beta"),
                            TRUE ~ Parameter), 
      Model = family,
      Illusion=illusion
    ) |> 
    data_filter(Parameter != "Incongruent")
  
  scores
}


ebbinghaus_err <- get_scores(illusion1_ebbinghaus_err, "Ebbinghaus")
ebbinghaus_rt <- get_scores(illusion1_ebbinghaus_rt, "Ebbinghaus")
mullerlyer_err <- get_scores(illusion1_mullerlyer_err, "MullerLyer")
mullerlyer_rt <- get_scores(illusion1_mullerlyer_rt, "MullerLyer")
verticalhorizontal_err <- get_scores(illusion1_verticalhorizontal_err, "VerticalHorizontal")
verticalhorizontal_rt <- get_scores(illusion1_verticalhorizontal_rt, "VerticalHorizontal")
```


### Reliability

```{r}
#| warning: false

get_reliability <- function(scores) {
  scores |> 
    summarise(SD_Median = sd(Median, na.rm=TRUE),
              Mean_MAD = mean(MAD, na.rm=TRUE),
              Model = first(Model),
              .by=c("Illusion", "Parameter")) |> 
    mutate(Reliability = SD_Median / Mean_MAD, 
           Parameter = paste0(Model, "_", Parameter)) |> 
    select(-c(SD_Median, Mean_MAD, Model)) 
}

rel <- rbind(
  get_reliability(ebbinghaus_err),
  get_reliability(ebbinghaus_rt),
  get_reliability(mullerlyer_err),
  get_reliability(mullerlyer_rt),
  get_reliability(verticalhorizontal_err),
  get_reliability(verticalhorizontal_rt)
) |> 
  pivot_wider(names_from = "Illusion", values_from = "Reliability") 


rel |> 
  gt::gt() |> 
  gt::fmt_number() |> 
  gt::data_color(columns=-1, method="numeric", 
                 palette=c("red", "orange", "yellow", "#CDDC39", "#8BC34A", "#4CAF50"), 
                 domain=c(0, 3), na_color="#2E7D32") |> 
  gt::opt_stylize() |> 
  gt::opt_interactive(use_compact_mode = TRUE) |> 
  gt::tab_header("Reliability")
```



### Figure


```{r}
#| fig-width: 17
#| fig-height: 18

get_plot <- function(scores) {
  colors <- c("Diff" = "#2196F3", "Strength" = "#9C27B0", "Interaction" = "#FF5722",
              "IncongruentBeta" = "#f9cb35", "IncongruentSigma" = "#f98e09",  # Temporary
              "DiffBeta" = "#57106e", "InterceptBeta" = "#f98e09",
              "DiffSigma" = "#8a226a", "InterceptSigma" = "#f9cb35")

  scores |>
    ggplot(aes(x = Median, y = Level)) +
    geom_pointrange(aes(xmin = CI_low, xmax = CI_high, color = Parameter), linewidth=0.2, size=0.25) +
    scale_color_manual(values = colors, guide = "none") +
    scale_fill_manual(values = colors, guide = "none") +
    labs(y = "Participants") +
    theme_modern() +
    theme(
      strip.placement = "oustide",
      axis.title.x = element_blank(),
      axis.text.y = element_blank()
    ) +
    ggside::geom_xsidedensity(aes(fill = Parameter, y = after_stat(scaled)), color = NA, alpha = 0.7) +
    ggside::theme_ggside_void() +
    ggside::scale_xsidey_continuous(expand = c(0, 0)) +
    ggside::ggside() +
    facet_grid(~Parameter, switch = "both", scales = "free") +
    ggtitle(paste(scores$Illusion[1], "-", scores$Model[1]))
}

p <- (get_plot(ebbinghaus_err) + get_plot(ebbinghaus_rt)) /
  (get_plot(mullerlyer_err) + get_plot(mullerlyer_rt)) /
  (get_plot(verticalhorizontal_err) + get_plot(verticalhorizontal_rt)) +
  plot_layout(guides = "collect") +
  plot_annotation(title = "Inter- and Intra- Variability of Illusion Scores", theme = theme(plot.title = element_text(face = "bold", hjust = 0.5)))
p
```



### Save Scores


```{r}
tidy_scores <- function(scores) {
  illusion <- scores$Illusion[1]
  family <- scores$Model[1]
  scores |>
    select(Parameter, Participant = Level, Median) |>
    pivot_wider(names_from = "Parameter", values_from = "Median") |>
    data_addprefix(paste0(illusion, "_"), select = -1) |>
    data_addsuffix(paste0("_", family), select = -1)
}

scores <- tidy_scores(ebbinghaus_err) |> 
  merge(tidy_scores(ebbinghaus_rt), by="Participant") |> 
  merge(tidy_scores(mullerlyer_err), by="Participant") |>
  merge(tidy_scores(mullerlyer_rt), by="Participant") |>
  merge(tidy_scores(verticalhorizontal_err), by="Participant") |>
  merge(tidy_scores(verticalhorizontal_rt), by="Participant")

write.csv(scores, "../data/scores_illusion1.csv", row.names = FALSE)
```
